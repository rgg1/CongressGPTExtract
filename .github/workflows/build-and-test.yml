name: Build and Test Windows and macOS Executables

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # For manual triggering

jobs:
  build-and-test-windows:
    runs-on: windows-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      
    - name: Create .env file with API key
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
      
    - name: Build executable
      run: |
        # Build using the existing file
        pyinstaller --onefile --name congressional_extractor --add-data "gpt_parsing_files;gpt_parsing_files" --clean --hidden-import openai --hidden-import dotenv --hidden-import gpt_parsing_files.diplomatic_offices run_exe.py
        
        $exeSize = (Get-Item "dist\congressional_extractor.exe").Length / 1MB
        echo "Executable size: $([math]::Round($exeSize, 2)) MB"
        echo "Build successful: Executable created"
    
    - name: Copy test validator
      run: |
        # Use existing test_validator.py
        if (Test-Path "test_validator.py") {
          echo "Using existing test_validator.py"
          # Make sure the file is properly encoded for Windows
          (Get-Content -Path "test_validator.py" -Raw) | Set-Content -Path "test_validator.py" -Encoding UTF8
          
          Copy-Item -Path "test_validator.py" -Destination "dist\" -Force
        } else {
          echo "ERROR: No test_validator.py found in repository. The workflow requires this file."
          exit 1
        }
    
    - name: Prepare test environment
      run: |
        # Create the necessary directories for test
        New-Item -Path "dist\outputs\117" -ItemType Directory -Force
        New-Item -Path "dist\congressional_directory_files\congress_117\txt" -ItemType Directory -Force
        
        # Create gpt_parsing_files directory structure in dist
        New-Item -Path "dist\gpt_parsing_files" -ItemType Directory -Force
        
        # Copy all Python files from gpt_parsing_files to dist\gpt_parsing_files
        Copy-Item -Path "gpt_parsing_files\*.py" -Destination "dist\gpt_parsing_files\" -Force
        
        # Create an __init__.py file in the gpt_parsing_files directory
        Set-Content -Path "dist\gpt_parsing_files\__init__.py" -Value ""
        
        # Copy .env file to dist folder
        Copy-Item -Path ".env" -Destination "dist\" -Force
        
        # Create test data or copy existing diplomatic offices data file
        if (-not (Test-Path "congressional_directory_files\congress_117\txt\CDIR-*-DIPLOMATICOFFICES.txt")) {
          echo "Creating sample test file for diplomatic offices processor"
          
          Set-Content -Path "dist\congressional_directory_files\congress_117\txt\CDIR-2022-10-26-DIPLOMATICOFFICES.txt" -Value "DIPLOMATIC OFFICES`r`n`r`nAFGHANISTAN`r`n`r`nJane Smith, Ambassador Extraordinary and Plenipotentiary`r`n`r`nCANADA`r`n`r`nJohn Doe, Minister Counselor"
        } else {
          # Copy real data for testing
          $diplomaticFiles = Get-ChildItem "congressional_directory_files\congress_117\txt\CDIR-*-DIPLOMATICOFFICES*.txt" -File
          foreach ($file in $diplomaticFiles) {
            Copy-Item -Path $file.FullName -Destination "dist\congressional_directory_files\congress_117\txt\" -Force
          }
        }
        
        Copy-Item -Path "test_validator.py" -Destination "dist\" -Force
      
    - name: Test executable
      run: |
        cd dist
        
        # For debugging
        echo "Current directory structure:"
        Get-ChildItem -Recurse | Select-Object FullName
        
        echo "Running diplomatic_offices processor for 117th Congress..."
        .\congressional_extractor.exe --congress 117 --processors diplomatic_offices
        
        echo "Checking output files:"
        Get-ChildItem outputs -Recurse
        
        echo "Validating output..."
        python test_validator.py 117
        
        if ($LASTEXITCODE -eq 0) {
          echo "✅ Test passed: Executable generated valid output"
        } else {
          echo "❌ Test failed: Executable did not generate valid output"
          exit 1
        }

        # Clean up sensitive files after testing
        Remove-Item -Path ".env" -Force -ErrorAction SilentlyContinue

    - name: Performance comparison
      run: |
        cd dist
        
        echo "Running as executable..."
        $startExe = Get-Date
        .\congressional_extractor.exe --congress 117 --processors diplomatic_offices
        $endExe = Get-Date
        $exeTime = ($endExe - $startExe).TotalSeconds
        
        echo "Running as interpreter..."
        $startInt = Get-Date
        python -c "import os, sys, openai; from dotenv import load_dotenv; sys.path.insert(0, '.'); from gpt_parsing_files.diplomatic_offices import process_diplomatic_offices_file_for_congress; load_dotenv(); client = openai.OpenAI(api_key=os.environ.get('OPENAI_API_KEY')); process_diplomatic_offices_file_for_congress('117', client, '.')"
        $endInt = Get-Date
        $intTime = ($endInt - $startInt).TotalSeconds
        
        echo "Performance comparison:"
        echo "Executable time: $exeTime seconds"
        echo "Interpreter time: $intTime seconds"
        
        # Calculate percentage difference
        if ($intTime -gt 0) {
          $diff_percent = [Math]::Round((($exeTime - $intTime) / $intTime) * 100, 2)
          echo "Difference: $diff_percent% ($( if($diff_percent -lt 0) { 'executable is faster' } else { 'interpreter is faster' } ))"
        } else {
          echo "Could not calculate percentage difference (division by zero)"
        }

    - name: Create distribution package
      if: success()
      run: |
        # Create package directory
        New-Item -Path "package" -ItemType Directory -Force
        Copy-Item -Path "dist\congressional_extractor.exe" -Destination "package\" -Force
        
        # Copy existing batch file
        Copy-Item -Path "run_extractor.bat" -Destination "package\" -Force
        
        # Copy existing README
        Copy-Item -Path "README.md" -Destination "package\" -Force
        
        # Create .env template (use existing if available, create if not)
        if (Test-Path ".env.template") {
            Copy-Item -Path ".env.template" -Destination "package\.env.template" -Force
        } else {
            New-Item -Path "package\.env.template" -ItemType File -Force
            Add-Content -Path "package\.env.template" -Value "# Add your OpenAI API key below"
            Add-Content -Path "package\.env.template" -Value "OPENAI_API_KEY=your_api_key_here"
        }

        # Create directory structure
        New-Item -Path "package\congressional_directory_files" -ItemType Directory -Force
        New-Item -Path "package\outputs" -ItemType Directory -Force

        # Add a sample directory structure
        New-Item -Path "package\congressional_directory_files\congress_sample" -ItemType Directory -Force
        New-Item -Path "package\congressional_directory_files\congress_sample\txt" -ItemType Directory -Force

        # Create sample README
        New-Item -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -ItemType File -Force
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "This is a sample text file showing the directory structure."
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "Actual congressional document text files should be placed here."
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "File naming format: CDIR-YYYY-MM-DD-SECTION.txt"
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "Examples: CDIR-2022-10-26-DIPLOMATICOFFICES.txt, CDIR-2022-10-26-JUDICIARY.txt"
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: congressional-data-extraction-tool
        path: package\
        
    - name: Upload executable only
      uses: actions/upload-artifact@v4
      with:
        name: congressional-extractor
        path: dist\congressional_extractor.exe
        
    - name: Upload debug artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts
        path: |
          dist\outputs\
          dist\congressional_directory_files\

  build-and-test-macos:
    runs-on: macos-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      
    - name: Create .env file with API key
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
      
    - name: Build macOS application
      run: |
        # Build using the existing file
        pyinstaller --onefile --windowed --name congressional_extractor --add-data "gpt_parsing_files:gpt_parsing_files" --clean --hidden-import openai --hidden-import dotenv --hidden-import gpt_parsing_files.diplomatic_offices run_exe.py
        
        # Check application info
        ls -la dist
        du -sh dist/congressional_extractor.app
        echo "Build successful: macOS application created"
    
    - name: Copy test validator
      run: |
        # Make sure the file exists
        if [ -f "test_validator.py" ]; then
          echo "Using existing test_validator.py"
          # Copy test validator
          cp test_validator.py dist/
        else
          echo "ERROR: No test_validator.py found in repository. The workflow requires this file."
          exit 1
        fi
    
    - name: Prepare test environment
      run: |
        # Create the necessary directories for test
        mkdir -p dist/outputs/117
        mkdir -p dist/congressional_directory_files/congress_117/txt
        
        # Create gpt_parsing_files directory structure in dist
        mkdir -p dist/gpt_parsing_files
        
        # Copy all Python files from gpt_parsing_files to dist/gpt_parsing_files
        cp gpt_parsing_files/*.py dist/gpt_parsing_files/
        
        # Create an __init__.py file in the gpt_parsing_files directory
        touch dist/gpt_parsing_files/__init__.py
        
        # Copy .env file to dist folder
        cp .env dist/
        
        # Create test data for diplomatic offices processor
        echo "Creating sample test file for diplomatic offices processor"
        echo "DIPLOMATIC OFFICES" > dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "AFGHANISTAN" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "Jane Smith, Ambassador Extraordinary and Plenipotentiary" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "CANADA" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt
        echo "John Doe, Minister Counselor" >> dist/congressional_directory_files/congress_117/txt/CDIR-2022-10-26-DIPLOMATICOFFICES.txt

    - name: Test application
      run: |
        cd dist
        
        # For debugging
        echo "Current directory structure:"
        find . -type f | sort
        
        # Copy the files to where the application is looking for them
        mkdir -p congressional_extractor.app/Contents/MacOS/congressional_directory_files/congress_117/txt/
        mkdir -p congressional_extractor.app/Contents/MacOS/outputs/117
        cp -R congressional_directory_files/* congressional_extractor.app/Contents/MacOS/congressional_directory_files/
        
        echo "Running diplomatic_offices processor for 117th Congress..."
        ./congressional_extractor.app/Contents/MacOS/congressional_extractor --congress 117 --processors diplomatic_offices
        
        # Copy the output files back to where the validator expects them
        cp -R congressional_extractor.app/Contents/MacOS/outputs/* outputs/
        
        echo "Checking output files:"
        find outputs -type f
        
        echo "Validating output..."
        python test_validator.py 117
        
        if [ $? -eq 0 ]; then
          echo "✅ Test passed: Application generated valid output"
        else
          echo "❌ Test failed: Application did not generate valid output"
          exit 1
        fi

    - name: Create distribution package
      if: success()
      run: |
        # Create package directory
        mkdir -p package_mac
        
        # Copy application
        cp -R dist/congressional_extractor.app package_mac/
        
        # Copy existing README
        cp README.md package_mac/
        
        # Copy .env template
        cp .env.template package_mac/
        
        # Create directory structure
        mkdir -p package_mac/congressional_directory_files
        mkdir -p package_mac/outputs
        
        # Add a sample directory structure
        mkdir -p package_mac/congressional_directory_files/congress_sample/txt
        
        # Create sample README
        echo "This is a sample text file showing the directory structure." > package_mac/congressional_directory_files/congress_sample/txt/README.txt
        echo "Actual congressional document text files should be placed here." >> package_mac/congressional_directory_files/congress_sample/txt/README.txt
        echo "File naming format: CDIR-YYYY-MM-DD-SECTION.txt" >> package_mac/congressional_directory_files/congress_sample/txt/README.txt
        echo "Examples: CDIR-2022-10-26-DIPLOMATICOFFICES.txt, CDIR-2022-10-26-JUDICIARY.txt" >> package_mac/congressional_directory_files/congress_sample/txt/README.txt
        
        # Create a macOS shell script to run the app
        echo '#!/bin/bash' > package_mac/run_extractor.command
        echo 'cd "$(dirname "$0")"' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo '# Check if .env file exists' >> package_mac/run_extractor.command
        echo 'if [ ! -f .env ]; then' >> package_mac/run_extractor.command
        echo '  echo "WARNING: No .env file found with OpenAI API key"' >> package_mac/run_extractor.command
        echo '  echo "You can either:"' >> package_mac/run_extractor.command
        echo '  echo "  1. Create a .env file with your OpenAI API key (OPENAI_API_KEY=your_key_here)"' >> package_mac/run_extractor.command
        echo '  echo "  2. Enter your API key in the prompt below"' >> package_mac/run_extractor.command
        echo '  echo ""' >> package_mac/run_extractor.command
        echo '  ' >> package_mac/run_extractor.command
        echo '  read -p "Enter your OpenAI API key (leave blank to exit): " api_key' >> package_mac/run_extractor.command
        echo '  if [ -z "$api_key" ]; then' >> package_mac/run_extractor.command
        echo '    echo "No API key provided. Exiting."' >> package_mac/run_extractor.command
        echo '    exit' >> package_mac/run_extractor.command
        echo '  fi' >> package_mac/run_extractor.command
        echo 'fi' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo 'read -p "Enter Congress range (e.g., 117 or 114-117): " congress' >> package_mac/run_extractor.command
        echo 'if [ -z "$congress" ]; then' >> package_mac/run_extractor.command
        echo '  echo "No Congress number provided. Exiting."' >> package_mac/run_extractor.command
        echo '  exit' >> package_mac/run_extractor.command
        echo 'fi' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo 'echo "Available processors:"' >> package_mac/run_extractor.command
        echo 'echo "  - diplomatic_offices"' >> package_mac/run_extractor.command
        echo 'echo "  - judiciary"' >> package_mac/run_extractor.command
        echo 'echo "  - international_organizations"' >> package_mac/run_extractor.command
        echo 'echo "  - independent_agencies"' >> package_mac/run_extractor.command
        echo 'echo "  - house_senate_committees"' >> package_mac/run_extractor.command
        echo 'echo "  - departments"' >> package_mac/run_extractor.command
        echo 'echo "  - boards_and_commissions"' >> package_mac/run_extractor.command
        echo 'echo ""' >> package_mac/run_extractor.command
        echo 'read -p "Enter processors to run (leave blank for all, or space-separated list): " processors' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo 'echo ""' >> package_mac/run_extractor.command
        echo 'echo "Starting extraction process..."' >> package_mac/run_extractor.command
        echo 'echo ""' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo '# Check if we should pass the API key' >> package_mac/run_extractor.command
        echo 'if [ ! -z "$api_key" ]; then' >> package_mac/run_extractor.command
        echo '  if [ -z "$processors" ]; then' >> package_mac/run_extractor.command
        echo '    ./congressional_extractor.app/Contents/MacOS/congressional_extractor --congress "$congress" --api_key "$api_key"' >> package_mac/run_extractor.command
        echo '  else' >> package_mac/run_extractor.command
        echo '    ./congressional_extractor.app/Contents/MacOS/congressional_extractor --congress "$congress" --processors $processors --api_key "$api_key"' >> package_mac/run_extractor.command
        echo '  fi' >> package_mac/run_extractor.command
        echo 'else' >> package_mac/run_extractor.command
        echo '  if [ -z "$processors" ]; then' >> package_mac/run_extractor.command
        echo '    ./congressional_extractor.app/Contents/MacOS/congressional_extractor --congress "$congress"' >> package_mac/run_extractor.command
        echo '  else' >> package_mac/run_extractor.command
        echo '    ./congressional_extractor.app/Contents/MacOS/congressional_extractor --congress "$congress" --processors $processors' >> package_mac/run_extractor.command
        echo '  fi' >> package_mac/run_extractor.command
        echo 'fi' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo 'echo ""' >> package_mac/run_extractor.command
        echo 'echo "Process completed."' >> package_mac/run_extractor.command
        echo 'echo "Output files can be found in the \"outputs/$congress\" directory."' >> package_mac/run_extractor.command
        echo 'echo ""' >> package_mac/run_extractor.command
        echo '' >> package_mac/run_extractor.command
        echo 'echo "Press any key to exit."' >> package_mac/run_extractor.command
        echo 'read -n 1' >> package_mac/run_extractor.command
        chmod +x package_mac/run_extractor.command
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: congressional-data-extraction-tool-mac
        path: package_mac/
        
    - name: Upload macOS app only
      uses: actions/upload-artifact@v4
      with:
        name: congressional-extractor-mac
        path: dist/congressional_extractor.app/
