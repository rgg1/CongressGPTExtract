name: Build and Test Windows Executable

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # For manual triggering

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      
    - name: Create .env file with API key
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
      
    - name: Build executable
      run: |
        # Build using the existing file
        pyinstaller --onefile --name congressional_extractor --add-data "gpt_parsing_files;gpt_parsing_files" run_exe.py
        echo "Build successful: Executable created"
    
    - name: Copy test validator
      run: |
        # Use existing test_validator.py instead of creating a new one
        if (Test-Path "test_validator.py") {
          echo "Using existing test_validator.py"
          # Make sure the file is properly encoded for Windows
          (Get-Content -Path "test_validator.py" -Raw) | Set-Content -Path "test_validator.py" -Encoding UTF8
          
          # Copy test validator
          Copy-Item -Path "test_validator.py" -Destination "dist\" -Force
        } else {
          echo "ERROR: No test_validator.py found in repository. The workflow requires this file."
          exit 1
        }
    
    - name: Prepare test environment
      run: |
        # Create the necessary directories for test
        New-Item -Path "dist\outputs\117" -ItemType Directory -Force
        New-Item -Path "dist\congressional_directory_files\congress_117\txt" -ItemType Directory -Force
        
        # Create gpt_parsing_files directory structure in dist
        New-Item -Path "dist\gpt_parsing_files" -ItemType Directory -Force
        
        # Copy all Python files from gpt_parsing_files to dist\gpt_parsing_files
        Copy-Item -Path "gpt_parsing_files\*.py" -Destination "dist\gpt_parsing_files\" -Force
        
        # Create an __init__.py file in the gpt_parsing_files directory
        Set-Content -Path "dist\gpt_parsing_files\__init__.py" -Value ""
        
        # Copy .env file to dist folder
        Copy-Item -Path ".env" -Destination "dist\" -Force
        
        # Create test data or copy existing diplomatic offices data file
        if (-not (Test-Path "congressional_directory_files\congress_117\txt\CDIR-*-DIPLOMATICOFFICES.txt")) {
          echo "Creating sample test file for diplomatic offices processor"
          
          # Create a test file directly with Set-Content
          Set-Content -Path "dist\congressional_directory_files\congress_117\txt\CDIR-2022-10-26-DIPLOMATICOFFICES.txt" -Value "DIPLOMATIC OFFICES`r`n`r`nAFGHANISTAN`r`n`r`nJane Smith, Ambassador Extraordinary and Plenipotentiary`r`n`r`nCANADA`r`n`r`nJohn Doe, Minister Counselor"
        } else {
          # Copy real data for testing
          $diplomaticFiles = Get-ChildItem "congressional_directory_files\congress_117\txt\CDIR-*-DIPLOMATICOFFICES*.txt" -File
          foreach ($file in $diplomaticFiles) {
            Copy-Item -Path $file.FullName -Destination "dist\congressional_directory_files\congress_117\txt\" -Force
          }
        }
        
        # Copy test validator
        Copy-Item -Path "test_validator.py" -Destination "dist\" -Force
      
    - name: Test executable
      run: |
        cd dist
        
        # For debugging
        echo "Current directory structure:"
        Get-ChildItem -Recurse | Select-Object FullName
        
        echo "Running diplomatic_offices processor for 117th Congress..."
        .\congressional_extractor.exe --congress 117 --processors diplomatic_offices
        
        echo "Checking output files:"
        Get-ChildItem outputs -Recurse
        
        echo "Validating output..."
        python test_validator.py 117
        
        if ($LASTEXITCODE -eq 0) {
          echo "✅ Test passed: Executable generated valid output"
        } else {
          echo "❌ Test failed: Executable did not generate valid output"
          exit 1
        }

        # Clean up sensitive files after testing
        Remove-Item -Path ".env" -Force -ErrorAction SilentlyContinue

    - name: Performance comparison
      run: |
        cd dist
        
        echo "Running as executable..."
        .\congressional_extractor.exe --congress 117 --processors diplomatic_offices
        
        echo "Running as interpreter..."
        python ..\run_interpreter_test.py
        
        # Compare performance
        $exe_time = Get-Content -Path "executable_performance.txt"
        $int_time = Get-Content -Path "interpreter_performance.txt"
        
        echo "Performance comparison:"
        echo "Executable time: $exe_time seconds"
        echo "Interpreter time: $int_time seconds"
        
        # Calculate percentage difference
        $exe_time = [double]$exe_time
        $int_time = [double]$int_time
        
        if ($int_time -gt 0) {
          $diff_percent = [Math]::Round((($exe_time - $int_time) / $int_time) * 100, 2)
          echo "Difference: $diff_percent% ($( if($diff_percent -lt 0) { 'executable is faster' } else { 'interpreter is faster' } ))"
        } else {
          echo "Could not calculate percentage difference (division by zero)"
        }
    
    - name: Create distribution package
      if: success()
      run: |
        # Create package directory
        New-Item -Path "package" -ItemType Directory -Force
        Copy-Item -Path "dist\congressional_extractor.exe" -Destination "package\" -Force
        
        # Copy existing batch file
        Copy-Item -Path "run_extractor.bat" -Destination "package\" -Force
        
        # Copy existing README
        Copy-Item -Path "README.md" -Destination "package\" -Force
        
        # Create .env template (use existing if available, create if not)
        if (Test-Path ".env.template") {
            Copy-Item -Path ".env.template" -Destination "package\.env.template" -Force
        } else {
            New-Item -Path "package\.env.template" -ItemType File -Force
            Add-Content -Path "package\.env.template" -Value "# Add your OpenAI API key below"
            Add-Content -Path "package\.env.template" -Value "OPENAI_API_KEY=your_api_key_here"
        }

        # Create directory structure
        New-Item -Path "package\congressional_directory_files" -ItemType Directory -Force
        New-Item -Path "package\outputs" -ItemType Directory -Force

        # Add a sample directory structure
        New-Item -Path "package\congressional_directory_files\congress_sample" -ItemType Directory -Force
        New-Item -Path "package\congressional_directory_files\congress_sample\txt" -ItemType Directory -Force

        # Create sample README
        New-Item -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -ItemType File -Force
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "This is a sample text file showing the directory structure."
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "Actual congressional document text files should be placed here."
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "File naming format: CDIR-YYYY-MM-DD-SECTION.txt"
        Add-Content -Path "package\congressional_directory_files\congress_sample\txt\README.txt" -Value "Examples: CDIR-2022-10-26-DIPLOMATICOFFICES.txt, CDIR-2022-10-26-JUDICIARY.txt"
    
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: congressional-data-extraction-tool
        path: package\
        
    - name: Upload executable only
      uses: actions/upload-artifact@v4
      with:
        name: congressional-extractor
        path: dist\congressional_extractor.exe
        
    - name: Upload debug artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-artifacts
        path: |
          dist\outputs\
          dist\congressional_directory_files\